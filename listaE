#include <iostream>

using namespace std;

struct tNo{
    float info;
    tNo* proximo;
};

struct tLista{
    tNo* primeiro;
    tNo* ultimo;
    tNo* marcador;
    int tamanho;
};

void iniciarLista(tLista* pLista){
    pLista->primeiro = NULL;
    pLista->ultimo = NULL;
    pLista->marcador = NULL;
    pLista->tamanho = 0;
}

int obterTamanho(tLista* pLista){
    return (pLista->tamanho);
}


bool listaVazia(tLista* pLista){
    return (pLista->tamanho==0);
}


bool finalLista(tLista* pLista){
    return (pLista->marcador == NULL);
}


tNo* criaNo(float item){
    tNo* no = new tNo;

    no->info = item;
    no->proximo = NULL;

    return no;
}


void incluirElemento(tLista* pLista, float info){
    tNo* no;
    no = criaNo(info);

    if (listaVazia(pLista)){
      pLista->primeiro = no;
    }else{
      pLista->ultimo->proximo = no;
    }

    pLista->ultimo = no;
    pLista->marcador = no;
    pLista->tamanho++;
}

void imprimirLista(tLista* pLista){

  pLista->marcador = pLista->primeiro;
   cout << " " << endl;
  while(!finalLista(pLista)){

  
    float informacao = pLista->marcador->info;
    pLista->marcador = pLista->marcador->proximo;
  cout << "-----------------------------------------" << endl;
    cout << "            Capital inicial: R$ " << informacao << endl;

    informacao = pLista->marcador->info;
    pLista->marcador = pLista->marcador->proximo;
    cout << "              Taxa de juros: " << (informacao*100) << " %" << endl;

    informacao = pLista->marcador->info;
    pLista->marcador = pLista->marcador->proximo;
    cout << "         Tempo de aplicacao: " << informacao << " ano(s)" << endl;

    informacao = pLista->marcador->info;
    pLista->marcador = pLista->marcador->proximo;
    cout << "    Montante a juro Simples: R$ " << informacao << endl;

    informacao = pLista->marcador->info;
    pLista->marcador = pLista->marcador->proximo;
    cout << "   Montante a juro Composto: R$ " << informacao << endl;

    cout << "-----------------------------------------" << endl;
  }
  cout << "-----------------------------------------" << endl;
  cout << endl;
}

void lerInformacoes(tLista* pLista){
  ifstream lerInfo;
  lerInfo.open("arquivo.txt", ios::in);

 
  while(!lerInfo.eof()){
    float informacao;

    
    lerInfo >> informacao;
    incluirElemento(pLista, informacao);
    pLista->marcador = pLista->marcador->proximo;

   
    lerInfo >> informacao;
    incluirElemento(pLista, informacao);
    pLista->marcador = pLista->marcador->proximo;

   
    lerInfo >> informacao;
    incluirElemento(pLista, informacao);
    pLista->marcador = pLista->marcador->proximo;

   
    lerInfo >> informacao;
    incluirElemento(pLista, informacao);
    pLista->marcador = pLista->marcador->proximo;

   
    lerInfo >> informacao;
    incluirElemento(pLista, informacao);
    pLista->marcador = pLista->marcador->proximo;
  }
 
  lerInfo.close();
}

void gravarLista(tLista* pLista){
 
  ofstream gravarInfo;
  
  gravarInfo.open("arquivo.txt", ios::out);

  
  pLista->marcador = pLista->primeiro;

 
  while(!finalLista(pLista)){
    
    float informacao = pLista->marcador->info;

    if (pLista->marcador == pLista->ultimo){
      gravarInfo << informacao;
    }else{
      gravarInfo << informacao << " ";
    }

    pLista->marcador = pLista->marcador->proximo;
  }
  
  gravarInfo.close();
}
